/*
	This file was automatically created using a source code generator.
	Do not edit this file manually as all changes will be overwritten
	the next time the generator runs again.
*/



/// <reference path="../../cuboro/tables/commentvo.ts"/>
/// <reference path="../../cuboro/tables/regionadminvo.ts"/>
/// <reference path="../../cuboro/tables/regionvariantvo.ts"/>
/// <reference path="../../cuboro/tables/reportscommentvo.ts"/>
/// <reference path="../../cuboro/tables/trackvo.ts"/>
/// <reference path="../../kr3m/types.ts"/>
//# !CLIENT
/// <reference path="../../kr3m/services/paramshelper.ts"/>
/// <reference path="../../kr3m/util/factory.ts"/>
//# /!CLIENT



module cuboro.tables
{
	export class UserVO
	{
		public static IMAGE_URL_MAX_LENGTH = 500;
		public static IMAGE_URL_MAX_LENGTH_SECURE = 250;

		public static LAST_REGION_ID_MAX_LENGTH = 32;
		public static LAST_REGION_ID_MAX_LENGTH_SECURE = 16;

		public static NAME_MAX_LENGTH = 200;
		public static NAME_MAX_LENGTH_SECURE = 100;



		public id:number; // bigint unsigned
		public imageUrl:string; // varchar(500)
		public lastRegionId:string = "MAIN"; // varchar(32)
		public name:string; // varchar(200)
//# !CLIENT



		public static isColumnName(name:string):boolean
		{
			return (["id","imageUrl","lastRegionId","name"]).indexOf(name) >= 0;
		}



		public static getColumnNames():string[]
		{
			return ["id","imageUrl","lastRegionId","name"];
		}



		/*
			Builds a proper cuboro.tables.UserVO class object from
			a POD / JSON object.

			If this is not possible, because some required attributes
			are missing for example, null will be returned.
		*/
		public static buildFrom(raw:any):cuboro.tables.UserVO
		{
			var helper = new kr3m.services.ParamsHelper(raw);
			if (!helper.validate({"id":"number","imageUrl":"string","lastRegionId":"string","name":"string"}, {"lastRegionId":"MAIN"}))
				return null;

			var foreignKeyNames = ["lastRegionId"];
			var vo = new cuboro.tables.UserVO();
			var copyFields = ["id","imageUrl","lastRegionId","name"];
			for (var i = 0; i < copyFields.length; ++i)
			{
				vo[copyFields[i]] = raw[copyFields[i]];
				if (!vo[copyFields[i]] && kr3m.util.Util.contains(foreignKeyNames, copyFields[i]))
					vo[copyFields[i]] = null;
			}
			return vo;
		}



		public constructor(rawData?:any)
		{
			if (rawData)
			{
				for (var i in rawData)
				{
					if (cuboro.tables.UserVO.isColumnName(i))
						this[i] = rawData[i];
				}
			}
		}



		private wrapErrorCallback(
			errorCallback:ErrorCallback,
			functionName:string):ErrorCallback
		{
			if (!errorCallback)
				return errorCallback;

			var newCallback = (errorMessage) =>
			{
				errorCallback("cuboro.tables.UserVO." + functionName + " - " + errorMessage);
			}
			return newCallback;
		}



		/*
			Will be called after the class was created and filled
			with content from the database.
		*/
		public postLoad():void
		{
			// can be overwritten in derived classes
		}



		/*
			Will be called before the class' content will be
			written into the database.
		*/
		public preStore():void
		{
			// can be overwritten in derived classes
		}



		/*
			Will be called after the class' content was
			written into the database.
		*/
		public postStore():void
		{
			// can be overwritten in derived classes
		}



		public insert(
			callback?:(insertedId:number) => void,
			errorCallback?:ErrorCallback):void
		{
			errorCallback = this.wrapErrorCallback(errorCallback, "insert");
			this.preStore();
			db.insert("users", this, (insertedId:number) =>
			{
				this.id = insertedId;
				this.postStore();
				callback && callback(insertedId);
			}, errorCallback);
		}



		public upsert(
			callback?:(insertedId:number) => void,
			errorCallback?:ErrorCallback):void
		{
			errorCallback = this.wrapErrorCallback(errorCallback, "upsert");
			this.preStore();
			db.upsert("users", this, (insertedId:number) =>
			{
				this.id = insertedId || this.id;
				this.postStore();
				callback && callback(insertedId);
			}, null, errorCallback);
		}



		public update(
			callback?:Callback,
			errorCallback?:ErrorCallback):void
		{
			errorCallback = this.wrapErrorCallback(errorCallback, "update");
			this.preStore();
			db.update("users", this, () =>
			{
				this.postStore();
				callback && callback();
			}, "id", errorCallback);
		}



		public delete(
			callback?:Callback,
			errorCallback?:ErrorCallback):void
		{
			errorCallback = this.wrapErrorCallback(errorCallback, "delete");
			var where = db.escape("id = ?", [this.id]);
			db.deleteBatch("users", where, callback, errorCallback);
		}



		public getLastRegion(
			callback:CB<cuboro.tables.RegionVariantVO>,
			errorCallback?:ErrorCallback):void
		{
			errorCallback = this.wrapErrorCallback(errorCallback, "getLastRegion");
			var sql = "SELECT * FROM `region_variants` WHERE `id` = ? LIMIT 0,1";
			sql = db.escape(sql, [this.lastRegionId]);
			db.fetchRow(sql, (data) =>
			{
				if (!data)
					return callback(undefined);

				data.__proto__ = kr3m.util.Factory.getInstance().map(cuboro.tables.RegionVariantVO).prototype;
				data.postLoad();
				callback(data);
			}, errorCallback);
		}



		public getComments(
			where:string|{[colName:string]:any},
			offset:number,
			limit:number,
			callback:CB<cuboro.tables.CommentVO[]>,
			errorCallback:ErrorCallback):void;

		public getComments(
			where:string|{[colName:string]:any},
			offset:number,
			limit:number,
			callback:CB<cuboro.tables.CommentVO[]>):void;

		public getComments(
			where:string|{[colName:string]:any},
			callback:CB<cuboro.tables.CommentVO[]>,
			errorCallback:ErrorCallback):void;

		public getComments(
			where:string|{[colName:string]:any},
			callback:CB<cuboro.tables.CommentVO[]>):void;

		public getComments(
			offset:number,
			limit:number,
			callback:CB<cuboro.tables.CommentVO[]>,
			errorCallback:ErrorCallback):void;

		public getComments(
			offset:number,
			limit:number,
			callback:CB<cuboro.tables.CommentVO[]>):void;

		public getComments(
			callback:CB<cuboro.tables.CommentVO[]>,
			errorCallback:ErrorCallback):void;

		public getComments(
			callback:CB<cuboro.tables.CommentVO[]>):void;

		public getComments():void
		{
			var u = kr3m.util.Util;


			var whereObj = <{[colName:string]:any}> u.getFirstOfType(arguments, "object", 0, 0);
			var whereString = whereObj ? db.where(whereObj) : <string> u.getFirstOfType(arguments, "string", 0, 0);
			var where = whereString ? " AND (" + whereString.replace(/\bWHERE\b/i, "") + ") " : "";

			var offset = <number> u.getFirstOfType(arguments, "number", 0, 0);
			var limit = <number> u.getFirstOfType(arguments, "number", 0, 1);
			var limits = (offset !== undefined && limit !== undefined) ? db.escape(" LIMIT ?, ?", [offset, limit]) : "";

			var callback = <CB<cuboro.tables.CommentVO[]>> u.getFirstOfType(arguments, "function", 0, 0);
			var errorCallback = <ErrorCallback> u.getFirstOfType(arguments, "function", 0, 1);
			errorCallback = this.wrapErrorCallback(errorCallback, "getComments");

			var sql = "SELECT * FROM `comments` WHERE `userId` = ? " + where + limits;
			sql = db.escape(sql, [this.id]);
			db.fetchAll(sql, (rows) =>
			{
				for (var i = 0; i < rows.length; ++i)
				{
					rows[i].__proto__ = kr3m.util.Factory.getInstance().map(cuboro.tables.CommentVO).prototype;
					rows[i].postLoad();
				}
				callback(rows);
			}, errorCallback);
		}



		public getRegionAdmins(
			where:string|{[colName:string]:any},
			offset:number,
			limit:number,
			callback:CB<cuboro.tables.RegionAdminVO[]>,
			errorCallback:ErrorCallback):void;

		public getRegionAdmins(
			where:string|{[colName:string]:any},
			offset:number,
			limit:number,
			callback:CB<cuboro.tables.RegionAdminVO[]>):void;

		public getRegionAdmins(
			where:string|{[colName:string]:any},
			callback:CB<cuboro.tables.RegionAdminVO[]>,
			errorCallback:ErrorCallback):void;

		public getRegionAdmins(
			where:string|{[colName:string]:any},
			callback:CB<cuboro.tables.RegionAdminVO[]>):void;

		public getRegionAdmins(
			offset:number,
			limit:number,
			callback:CB<cuboro.tables.RegionAdminVO[]>,
			errorCallback:ErrorCallback):void;

		public getRegionAdmins(
			offset:number,
			limit:number,
			callback:CB<cuboro.tables.RegionAdminVO[]>):void;

		public getRegionAdmins(
			callback:CB<cuboro.tables.RegionAdminVO[]>,
			errorCallback:ErrorCallback):void;

		public getRegionAdmins(
			callback:CB<cuboro.tables.RegionAdminVO[]>):void;

		public getRegionAdmins():void
		{
			var u = kr3m.util.Util;


			var whereObj = <{[colName:string]:any}> u.getFirstOfType(arguments, "object", 0, 0);
			var whereString = whereObj ? db.where(whereObj) : <string> u.getFirstOfType(arguments, "string", 0, 0);
			var where = whereString ? " AND (" + whereString.replace(/\bWHERE\b/i, "") + ") " : "";

			var offset = <number> u.getFirstOfType(arguments, "number", 0, 0);
			var limit = <number> u.getFirstOfType(arguments, "number", 0, 1);
			var limits = (offset !== undefined && limit !== undefined) ? db.escape(" LIMIT ?, ?", [offset, limit]) : "";

			var callback = <CB<cuboro.tables.RegionAdminVO[]>> u.getFirstOfType(arguments, "function", 0, 0);
			var errorCallback = <ErrorCallback> u.getFirstOfType(arguments, "function", 0, 1);
			errorCallback = this.wrapErrorCallback(errorCallback, "getRegionAdmins");

			var sql = "SELECT * FROM `region_admins` WHERE `userId` = ? " + where + limits;
			sql = db.escape(sql, [this.id]);
			db.fetchAll(sql, (rows) =>
			{
				for (var i = 0; i < rows.length; ++i)
				{
					rows[i].__proto__ = kr3m.util.Factory.getInstance().map(cuboro.tables.RegionAdminVO).prototype;
					rows[i].postLoad();
				}
				callback(rows);
			}, errorCallback);
		}



		public getReportscomment(
			where:string|{[colName:string]:any},
			offset:number,
			limit:number,
			callback:CB<cuboro.tables.ReportscommentVO[]>,
			errorCallback:ErrorCallback):void;

		public getReportscomment(
			where:string|{[colName:string]:any},
			offset:number,
			limit:number,
			callback:CB<cuboro.tables.ReportscommentVO[]>):void;

		public getReportscomment(
			where:string|{[colName:string]:any},
			callback:CB<cuboro.tables.ReportscommentVO[]>,
			errorCallback:ErrorCallback):void;

		public getReportscomment(
			where:string|{[colName:string]:any},
			callback:CB<cuboro.tables.ReportscommentVO[]>):void;

		public getReportscomment(
			offset:number,
			limit:number,
			callback:CB<cuboro.tables.ReportscommentVO[]>,
			errorCallback:ErrorCallback):void;

		public getReportscomment(
			offset:number,
			limit:number,
			callback:CB<cuboro.tables.ReportscommentVO[]>):void;

		public getReportscomment(
			callback:CB<cuboro.tables.ReportscommentVO[]>,
			errorCallback:ErrorCallback):void;

		public getReportscomment(
			callback:CB<cuboro.tables.ReportscommentVO[]>):void;

		public getReportscomment():void
		{
			var u = kr3m.util.Util;


			var whereObj = <{[colName:string]:any}> u.getFirstOfType(arguments, "object", 0, 0);
			var whereString = whereObj ? db.where(whereObj) : <string> u.getFirstOfType(arguments, "string", 0, 0);
			var where = whereString ? " AND (" + whereString.replace(/\bWHERE\b/i, "") + ") " : "";

			var offset = <number> u.getFirstOfType(arguments, "number", 0, 0);
			var limit = <number> u.getFirstOfType(arguments, "number", 0, 1);
			var limits = (offset !== undefined && limit !== undefined) ? db.escape(" LIMIT ?, ?", [offset, limit]) : "";

			var callback = <CB<cuboro.tables.ReportscommentVO[]>> u.getFirstOfType(arguments, "function", 0, 0);
			var errorCallback = <ErrorCallback> u.getFirstOfType(arguments, "function", 0, 1);
			errorCallback = this.wrapErrorCallback(errorCallback, "getReportscomment");

			var sql = "SELECT * FROM `reportscomment` WHERE `userId` = ? " + where + limits;
			sql = db.escape(sql, [this.id]);
			db.fetchAll(sql, (rows) =>
			{
				for (var i = 0; i < rows.length; ++i)
				{
					rows[i].__proto__ = kr3m.util.Factory.getInstance().map(cuboro.tables.ReportscommentVO).prototype;
					rows[i].postLoad();
				}
				callback(rows);
			}, errorCallback);
		}



		public getTracks(
			where:string|{[colName:string]:any},
			offset:number,
			limit:number,
			callback:CB<cuboro.tables.TrackVO[]>,
			errorCallback:ErrorCallback):void;

		public getTracks(
			where:string|{[colName:string]:any},
			offset:number,
			limit:number,
			callback:CB<cuboro.tables.TrackVO[]>):void;

		public getTracks(
			where:string|{[colName:string]:any},
			callback:CB<cuboro.tables.TrackVO[]>,
			errorCallback:ErrorCallback):void;

		public getTracks(
			where:string|{[colName:string]:any},
			callback:CB<cuboro.tables.TrackVO[]>):void;

		public getTracks(
			offset:number,
			limit:number,
			callback:CB<cuboro.tables.TrackVO[]>,
			errorCallback:ErrorCallback):void;

		public getTracks(
			offset:number,
			limit:number,
			callback:CB<cuboro.tables.TrackVO[]>):void;

		public getTracks(
			callback:CB<cuboro.tables.TrackVO[]>,
			errorCallback:ErrorCallback):void;

		public getTracks(
			callback:CB<cuboro.tables.TrackVO[]>):void;

		public getTracks():void
		{
			var u = kr3m.util.Util;


			var whereObj = <{[colName:string]:any}> u.getFirstOfType(arguments, "object", 0, 0);
			var whereString = whereObj ? db.where(whereObj) : <string> u.getFirstOfType(arguments, "string", 0, 0);
			var where = whereString ? " AND (" + whereString.replace(/\bWHERE\b/i, "") + ") " : "";

			var offset = <number> u.getFirstOfType(arguments, "number", 0, 0);
			var limit = <number> u.getFirstOfType(arguments, "number", 0, 1);
			var limits = (offset !== undefined && limit !== undefined) ? db.escape(" LIMIT ?, ?", [offset, limit]) : "";

			var callback = <CB<cuboro.tables.TrackVO[]>> u.getFirstOfType(arguments, "function", 0, 0);
			var errorCallback = <ErrorCallback> u.getFirstOfType(arguments, "function", 0, 1);
			errorCallback = this.wrapErrorCallback(errorCallback, "getTracks");

			var sql = "SELECT * FROM `tracks` WHERE `ownerId` = ? " + where + limits;
			sql = db.escape(sql, [this.id]);
			db.fetchAll(sql, (rows) =>
			{
				for (var i = 0; i < rows.length; ++i)
				{
					rows[i].__proto__ = kr3m.util.Factory.getInstance().map(cuboro.tables.TrackVO).prototype;
					rows[i].postLoad();
				}
				callback(rows);
			}, errorCallback);
		}

//# /!CLIENT
	}
}

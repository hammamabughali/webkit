/*
	This file was automatically created using a source code generator.
	Do not edit this file manually as all changes will be overwritten
	the next time the generator runs again.
*/



/// <reference path="../../kr3m/types.ts"/>
//# !CLIENT
/// <reference path="../../kr3m/services/paramshelper.ts"/>
/// <reference path="../../kr3m/util/factory.ts"/>
//# /!CLIENT



module cuboro.tables
{
	export class SessionVO
	{
		public static ID_MAX_LENGTH = 32;
		public static ID_MAX_LENGTH_SECURE = 16;

		public static VALUES_JSON_MAX_LENGTH = 65535;
		public static VALUES_JSON_MAX_LENGTH_SECURE = 32767;



		public id:string = ""; // varchar(32)
		public lastUpdated:number; // bigint unsigned
		public valuesJson:string; // text
//# !CLIENT



		public static isColumnName(name:string):boolean
		{
			return (["id","lastUpdated","valuesJson"]).indexOf(name) >= 0;
		}



		public static getColumnNames():string[]
		{
			return ["id","lastUpdated","valuesJson"];
		}



		/*
			Builds a proper cuboro.tables.SessionVO class object from
			a POD / JSON object.

			If this is not possible, because some required attributes
			are missing for example, null will be returned.
		*/
		public static buildFrom(raw:any):cuboro.tables.SessionVO
		{
			var helper = new kr3m.services.ParamsHelper(raw);
			if (!helper.validate({"id":"string","lastUpdated":"number","valuesJson":"string"}, {"id":""}))
				return null;

			var foreignKeyNames = [];
			var vo = new cuboro.tables.SessionVO();
			var copyFields = ["id","lastUpdated","valuesJson"];
			for (var i = 0; i < copyFields.length; ++i)
			{
				vo[copyFields[i]] = raw[copyFields[i]];
				if (!vo[copyFields[i]] && kr3m.util.Util.contains(foreignKeyNames, copyFields[i]))
					vo[copyFields[i]] = null;
			}
			return vo;
		}



		public constructor(rawData?:any)
		{
			if (rawData)
			{
				for (var i in rawData)
				{
					if (cuboro.tables.SessionVO.isColumnName(i))
						this[i] = rawData[i];
				}
			}
		}



		private wrapErrorCallback(
			errorCallback:ErrorCallback,
			functionName:string):ErrorCallback
		{
			if (!errorCallback)
				return errorCallback;

			var newCallback = (errorMessage) =>
			{
				errorCallback("cuboro.tables.SessionVO." + functionName + " - " + errorMessage);
			}
			return newCallback;
		}



		/*
			Will be called after the class was created and filled
			with content from the database.
		*/
		public postLoad():void
		{
			// can be overwritten in derived classes
		}



		/*
			Will be called before the class' content will be
			written into the database.
		*/
		public preStore():void
		{
			// can be overwritten in derived classes
		}



		/*
			Will be called after the class' content was
			written into the database.
		*/
		public postStore():void
		{
			// can be overwritten in derived classes
		}



		protected checkId(
			callback:(wasGenerated:boolean) => void,
			errorCallback?:ErrorCallback):void
		{
			errorCallback = this.wrapErrorCallback(errorCallback, "checkId");
			if (this.id)
				return callback(false);

			kr3m.async.Loop.loop((loopDone) =>
			{
				kr3m.util.Rand.getSecureString(32, null, (secureValue) =>
				{
					this.id = secureValue;
					db.fetchOne(db.escape("SELECT id FROM sessions WHERE id = ? LIMIT 0,1;", [this.id]), dummy => loopDone(!!dummy), errorCallback);
				});
			}, () => callback(true));
		}



		public insert(
			callback?:Callback,
			errorCallback?:ErrorCallback):void
		{
			errorCallback = this.wrapErrorCallback(errorCallback, "insert");
			var retries = 3;
			kr3m.async.Loop.loop((loopDone) =>
			{
				this.checkId((wasGenerated) =>
				{
					this.preStore();
					db.insert("sessions", this, () =>
					{
						this.postStore();
						callback && callback();
					}, (errorMessage) =>
					{
						if (!wasGenerated || retries <= 0 || errorMessage.indexOf("ER_DUP_ENTRY") < 0)
						{
							if (errorCallback)
								return errorCallback(errorMessage);

							logError(errorMessage);
							return callback && callback();
						}

						logWarning(errorMessage);
						logWarning("retrying");
						--retries;
						loopDone(true);
					});
				});
			});
		}



		public upsert(
			callback?:Callback,
			errorCallback?:ErrorCallback):void
		{
			errorCallback = this.wrapErrorCallback(errorCallback, "upsert");
			var retries = 3;
			kr3m.async.Loop.loop((loopDone) =>
			{
				this.checkId((wasGenerated) =>
				{
					this.preStore();
					db.upsert("sessions", this, () =>
					{
						this.postStore();
						callback && callback();
					}, null, (errorMessage) =>
					{
						if (!wasGenerated || retries <= 0 || errorMessage.indexOf("ER_DUP_ENTRY") < 0)
						{
							if (errorCallback)
								return errorCallback(errorMessage);

							logError(errorMessage);
							return callback && callback();
						}

						logWarning(errorMessage);
						logWarning("retrying");
						--retries;
						loopDone(true);
					});
				});
			});
		}



		public update(
			callback?:Callback,
			errorCallback?:ErrorCallback):void
		{
			errorCallback = this.wrapErrorCallback(errorCallback, "update");
			this.preStore();
			db.update("sessions", this, () =>
			{
				this.postStore();
				callback && callback();
			}, "id", errorCallback);
		}



		public delete(
			callback?:Callback,
			errorCallback?:ErrorCallback):void
		{
			errorCallback = this.wrapErrorCallback(errorCallback, "delete");
			var where = db.escape("id = ?", [this.id]);
			db.deleteBatch("sessions", where, callback, errorCallback);
		}

//# /!CLIENT
	}
}
